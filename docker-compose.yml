services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: ruth_postgres
    environment:
      POSTGRES_DB: ruth_db
      POSTGRES_USER: ruth_user
      POSTGRES_PASSWORD: ruth_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ruth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ruth_user -d ruth_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ruth_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ruth_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ruth_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://ruth_user:ruth_password@postgres:5432/ruth_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - ./backend/.env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ruth_network

  # Celery Worker for Async Tasks
  celery_worker:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ruth_celery_worker
    command: celery -A app.tasks worker --loglevel=info
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    environment:
      - DATABASE_URL=postgresql://ruth_user:ruth_password@postgres:5432/ruth_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - ruth_network

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend
    container_name: ruth_celery_beat
    command: celery -A app.tasks beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - DATABASE_URL=postgresql://ruth_user:ruth_password@postgres:5432/ruth_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
      - redis
      - backend
    networks:
      - ruth_network

  # Frontend React Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ruth_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_API_PROXY_TARGET=http://backend:8000
    depends_on:
      - backend
    networks:
      - ruth_network
    stdin_open: true
    tty: true

  # Nginx Reverse Proxy (Production-like setup)
  nginx:
    image: nginx:alpine
    container_name: ruth_nginx
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    networks:
      - ruth_network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  ruth_network:
    driver: bridge